// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: example/example.proto

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service1_Unary_FullMethodName        = "/bitlabs.survey_stats_v3.Service1/Unary"
	Service1_ServerStream_FullMethodName = "/bitlabs.survey_stats_v3.Service1/ServerStream"
)

// Service1Client is the client API for Service1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service1Client interface {
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Service1_ServerStreamClient, error)
}

type service1Client struct {
	cc grpc.ClientConnInterface
}

func NewService1Client(cc grpc.ClientConnInterface) Service1Client {
	return &service1Client{cc}
}

func (c *service1Client) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, Service1_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service1Client) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Service1_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service1_ServiceDesc.Streams[0], Service1_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &service1ServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service1_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type service1ServerStreamClient struct {
	grpc.ClientStream
}

func (x *service1ServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service1Server is the server API for Service1 service.
// All implementations must embed UnimplementedService1Server
// for forward compatibility
type Service1Server interface {
	Unary(context.Context, *Message) (*Message, error)
	ServerStream(*Message, Service1_ServerStreamServer) error
	mustEmbedUnimplementedService1Server()
}

// UnimplementedService1Server must be embedded to have forward compatible implementations.
type UnimplementedService1Server struct {
}

func (UnimplementedService1Server) Unary(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedService1Server) ServerStream(*Message, Service1_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedService1Server) mustEmbedUnimplementedService1Server() {}

// UnsafeService1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service1Server will
// result in compilation errors.
type UnsafeService1Server interface {
	mustEmbedUnimplementedService1Server()
}

func RegisterService1Server(s grpc.ServiceRegistrar, srv Service1Server) {
	s.RegisterService(&Service1_ServiceDesc, srv)
}

func _Service1_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service1Server).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service1_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service1Server).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service1_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Service1Server).ServerStream(m, &service1ServerStreamServer{stream})
}

type Service1_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type service1ServerStreamServer struct {
	grpc.ServerStream
}

func (x *service1ServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Service1_ServiceDesc is the grpc.ServiceDesc for Service1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitlabs.survey_stats_v3.Service1",
	HandlerType: (*Service1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Service1_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Service1_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example/example.proto",
}

const (
	Service2_Unary_FullMethodName = "/bitlabs.survey_stats_v3.Service2/Unary"
)

// Service2Client is the client API for Service2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service2Client interface {
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type service2Client struct {
	cc grpc.ClientConnInterface
}

func NewService2Client(cc grpc.ClientConnInterface) Service2Client {
	return &service2Client{cc}
}

func (c *service2Client) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, Service2_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service2Server is the server API for Service2 service.
// All implementations must embed UnimplementedService2Server
// for forward compatibility
type Service2Server interface {
	Unary(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedService2Server()
}

// UnimplementedService2Server must be embedded to have forward compatible implementations.
type UnimplementedService2Server struct {
}

func (UnimplementedService2Server) Unary(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedService2Server) mustEmbedUnimplementedService2Server() {}

// UnsafeService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service2Server will
// result in compilation errors.
type UnsafeService2Server interface {
	mustEmbedUnimplementedService2Server()
}

func RegisterService2Server(s grpc.ServiceRegistrar, srv Service2Server) {
	s.RegisterService(&Service2_ServiceDesc, srv)
}

func _Service2_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service2Server).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service2_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service2Server).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Service2_ServiceDesc is the grpc.ServiceDesc for Service2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitlabs.survey_stats_v3.Service2",
	HandlerType: (*Service2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Service2_Unary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/example.proto",
}
